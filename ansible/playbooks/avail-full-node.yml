---
- name: avail-full-node
  hosts: all
  vars_files:
    - ../group_vars/avail-node-vars.yml
  become: yes
  remote_user: ubuntu
  gather_facts: false
  vars:
    ansible_shell_executable: /bin/bash
    ansible_connection: aws_ssm
    ansible_aws_ssm_profile: default
    ansible_aws_ssm_bucket_name: avail-node-aws-ssm-connection-playbook
    ansible_aws_ssm_region: "eu-west-1"
  tasks:
    - name: pinging
      ping:

    - name: Update and Upgrade
      shell: |
        sudo apt update -y
        sudo apt upgrade -y
      register: result_update_upgrade

    - name: Install Git
      shell: |
        sudo apt install git-all -y
      register: result_git_install

    - name: Install required packages
      apt:
        name:
          - build-essential
          - git
          - clang
          - curl
          - libssl-dev
          - llvm
          - libudev-dev
          - make
          - protobuf-compiler
          - wget
          - tar
          - unzip
        state: present
        update_cache: yes

    - name: Download and run rustup installation script
      shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        executable: /bin/bash

    - name: Ensure Cargo environment is sourced in .bashrc
      shell: |
        if ! grep -q 'source $HOME/.cargo/env' ~/.bashrc; then
          echo 'source $HOME/.cargo/env' >> ~/.bashrc
        fi
      args:
        executable: /bin/bash

    - name: Export Cargo bin to PATH and source the Cargo environment
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
      args:
        executable: /bin/bash

    - name: Verify Rust installation
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustc --version
      register: rustc_version_output
      args:
        executable: /bin/bash

    - debug:
        msg: "Rust version: {{ rustc_version_output.stdout }}"

    - name: Set Rust to default stable
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustup default stable
      args:
        executable: /bin/bash

    - name: Update Rust toolchain
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustup update
      args:
        executable: /bin/bash

    - name: Update nightly Rust toolchain
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustup update nightly
      args:
        executable: /bin/bash

    - name: Add nightly WebAssembly target
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustup target add wasm32-unknown-unknown --toolchain nightly
      args:
        executable: /bin/bash

    - name: Verify Rust toolchain
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustup show
      register: rustup_show_output
      args:
        executable: /bin/bash

    - debug:
        msg: "{{ rustup_show_output.stdout }}"

    - name: Verify nightly Rust toolchain
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        source $HOME/.cargo/env
        rustup +nightly show
      register: rustup_nightly_show_output
      args:
        executable: /bin/bash

    - debug:
        msg: "{{ rustup_nightly_show_output.stdout }}"


    - name: Print Rust installation output
      debug:
        var: rust_install_output.stdout_lines

    - name: Verify Rust installation
      shell: |
        export PATH=$HOME/.cargo/bin:$PATH
        . $HOME/.cargo/env
        rustc --version
      register: rustc_version_output
      args:
        executable: /bin/bash

    - name: Print Rust installation version
      debug:
        msg: "Rust version: {{ rustc_version_output.stdout }}"
    
    - name: Install and Start Prometheus
      shell: |
        cd /tmp
        sudo useradd --system --no-create-home --shell /bin/false prometheus
        wget https://github.com/prometheus/prometheus/releases/download/v2.51.1/prometheus-2.51.1.linux-amd64.tar.gz
        tar -xvf prometheus-2.51.1.linux-amd64.tar.gz
        sudo mkdir -p /data/ /etc/prometheus
        cd prometheus-2.51.1.linux-amd64
        sudo mv prometheus promtool /usr/local/bin/
        sudo mv consoles/ console_libraries/ /etc/prometheus/
        sudo mv prometheus.yml /etc/prometheus/prometheus.yml
        sudo chown -R prometheus:prometheus /etc/prometheus/ /data/
        cd ..
        rm -rf prometheus*

        sudo cat <<EOL > /etc/systemd/system/prometheus.service
        [Unit]
        Description=Prometheus
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=prometheus
        Group=prometheus
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/prometheus \\
          --config.file=/etc/prometheus/prometheus.yml \\
          --storage.tsdb.path=/data \\
          --web.console.templates=/etc/prometheus/consoles \\
          --web.console.libraries=/etc/prometheus/console_libraries \\
          --web.listen-address=0.0.0.0:9090 \\
          --web.enable-lifecycle

        [Install]
        WantedBy=multi-user.target
        EOL

        sudo systemctl enable prometheus
        sudo systemctl start prometheus
      register: result_prometheus_install

    - name: Copy new prometheus.yml file
      copy:
        src: prometheus/prometheus.yml
        dest: /etc/prometheus/prometheus.yml

    - name: Copy new alert_rules.yml file
      copy:
        src: prometheus/alert_rules.yml
        dest: /etc/prometheus/alert_rules.yml

    - name: Restart Prometheus service
      systemd:
        name: prometheus
        state: restarted

    - name: Install and Start Node Exporter
      shell: |
        cd /tmp
        sudo useradd --system --no-create-home --shell /bin/false node_exporter
        wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
        tar -xvf node_exporter-1.3.1.linux-amd64.tar.gz
        sudo mv node_exporter-1.3.1.linux-amd64/node_exporter /usr/local/bin/
        rm -rf node_exporter*
        node_exporter --version

        sudo cat <<EOL > /etc/systemd/system/node_exporter.service
        [Unit]
        Description=Node Exporter
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=node_exporter
        Group=node_exporter
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/node_exporter \\
        --collector.logind

        [Install]
        WantedBy=multi-user.target
        EOL

        sudo systemctl enable node_exporter
        sudo systemctl start node_exporter
        sudo systemctl status node_exporter
      register: result_node_exporter_install

    - name: Add Grafana GPG key
      apt_key:
        url: https://apt.grafana.com/gpg.key
        state: present

    - name: Add Grafana APT repository
      apt_repository:
        repo: "deb https://apt.grafana.com stable main"
        state: present

    - name: Update APT package list
      apt:
        update_cache: yes

    - name: Install Loki and Promtail
      apt:
        name:
          - loki
          - promtail
        state: present

    - name: Create loki group
      group:
        name: loki
        state: present

    - name: Create loki user
      user:
        name: loki
        group: loki
        system: yes
        create_home: no

    - name: Create promtail group
      group:
        name: promtail
        state: present

    - name: Create promtail user
      user:
        name: promtail
        group: promtail
        system: yes
        create_home: no

    - name: Create Loki configuration directory
      file:
        path: /etc/loki
        state: directory
        owner: loki
        group: loki
        mode: '0755'

    - name: Copy Loki configuration file
      copy:
        src: loki/loki.yml
        dest: /etc/loki/loki.yml
        owner: loki
        group: loki
        mode: '0644'
      notify: Restart Loki

    - name: Create Promtail configuration directory
      file:
        path: /etc/promtail
        state: directory
        owner: promtail
        group: promtail
        mode: '0755'

    - name: Copy Promtail configuration file
      copy:
        src: loki/promtail.yml
        dest: /etc/promtail/config.yml
        owner: promtail
        group: promtail
        mode: '0644'
      notify: Restart Promtail

    - name: Ensure correct permissions on Promtail positions file directory
      file:
        path: /var/lib/promtail
        state: directory
        owner: promtail
        group: promtail
        mode: '0755'

    - name: Restart Loki
      systemd:
        name: loki
        state: restarted
        enabled: yes

    - name: Restart Promtail
      systemd:
        name: promtail
        state: restarted
        enabled: yes

    - name: Install Grafana
      shell: |
        cd /tmp
        sudo apt-get install -y apt-transport-https software-properties-common
        wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
        echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
        sudo apt-get update
        sudo apt-get -y install grafana
        sudo systemctl enable grafana-server
        sudo systemctl start grafana-server
      register: result_grafana_install

    - name: Transfer datasource.yml to remote host
      copy:
        src: grafana/datasource.yml
        dest: /etc/grafana/provisioning/datasources/datasource.yml
    
    - name: Transfer dashboards.yml to remote host
      copy:
        src: grafana/dashboards.yml
        dest: /etc/grafana/provisioning/dashboards/dashboards.yml

    - name: Transfer Grafana dashboards to remote host
      copy:
        src: "{{ item }}"
        dest: /etc/grafana/provisioning/dashboards/
      loop:
        - grafana/avail_node_dashboard.json
        - grafana/substrate_basic_dashboard.json
        - grafana/node_exporter_dashboard.json

    - name: Stop and Start Grafana
      shell: |
        sudo systemctl stop grafana-server
        sleep 7
        sudo systemctl start grafana-server
      register: result_grafana_stop_start

    - name: Check if directory exists [avail]
      stat:
        path: /home/avail
      register: dir_check_avail_node

    - name: Clone Avail Node
      shell: |
        cd /home/
        git clone https://github.com/availproject/avail.git
      when: not dir_check_avail_node.stat.exists
      register: result_clone_avail_node
    
    - name: Clean up any existing build locks
      shell: find /home/avail -name "*.lock" -type f -delete

    - name: Create log directories
      shell: |
        cd /home/
        mkdir logs
        cd logs
        mkdir node
        touch node/node.log
      register: result_logs

    - name: Update Cargo.lock file
      shell: |
        cd /home/avail
        export PATH=$HOME/.cargo/bin:$PATH
        cargo update
      register: result_cargo_update

    #COMPILING TAKES QUITE SOME TIME
    # - name: Run Avail Node [Compile and Run]
    #   shell: |
    #     cd /home/avail
    #     export PATH=$HOME/.cargo/bin:$PATH
    #     mkdir -p output
    #     cargo run --release -- --chain mainnet -d ./output > /home/logs/node/node.log 2>&1 &
    #   register: result_avail_node

    - name: Run Avail Node [Binary]
      shell: |
        cd /home/avail
        export PATH=$HOME/.cargo/bin:$PATH
        mkdir -p output
        curl -L -o avail-node.tar.gz https://github.com/availproject/avail/releases/download/v2.2.3.0-rc1/x86_64-ubuntu-2004-avail-node.tar.gz
        tar -xzvf avail-node.tar.gz
        ./avail-node --name "{{ node_name }}" --chain turing -d ./output > /home/logs/node/node.log 2>&1 &
      args:
        executable: /bin/bash
      register: result_avail_node
